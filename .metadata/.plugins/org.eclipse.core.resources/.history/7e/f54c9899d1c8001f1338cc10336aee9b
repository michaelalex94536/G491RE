
Timers_NonBlocking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003060  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003238  08003238  00004238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003278  08003278  00004278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003280  08003280  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00004280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003284  08003284  00004284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003288  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003294  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003294  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011191  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e1  00000000  00000000  000161cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000182b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  00019250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3f4  00000000  00000000  00019e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114b7  00000000  00000000  00038283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a2d  00000000  00000000  0004973a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b0  00000000  00000000  001131ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011745c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003220 	.word	0x08003220

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003220 	.word	0x08003220

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa7f 	bl	8000a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f82c 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8f8 	bl	8000708 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000518:	f000 f8be 	bl	8000698 <MX_TIM6_Init>
  MX_LPUART1_UART_Init();
 800051c:	f000 f872 	bl	8000604 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000520:	480f      	ldr	r0, [pc, #60]	@ (8000560 <main+0x58>)
 8000522:	f001 fe43 	bl	80021ac <HAL_TIM_Base_Start>
  timer_start = __HAL_TIM_GET_COUNTER(&htim6);
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <main+0x58>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <main+0x5c>)
 800052e:	6013      	str	r3, [r2, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <main+0x58>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000536:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <main+0x60>)
 8000538:	6013      	str	r3, [r2, #0]
	  if(timer_val - timer_start >= 1500)
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <main+0x60>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <main+0x5c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000548:	4293      	cmp	r3, r2
 800054a:	d9f1      	bls.n	8000530 <main+0x28>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f000 fd77 	bl	8001044 <HAL_GPIO_TogglePin>
		  htim6.Instance->CNT = 0;
 8000556:	4b02      	ldr	r3, [pc, #8]	@ (8000560 <main+0x58>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
	  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 800055e:	e7e7      	b.n	8000530 <main+0x28>
 8000560:	200000bc 	.word	0x200000bc
 8000564:	20000108 	.word	0x20000108
 8000568:	2000010c 	.word	0x2000010c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2238      	movs	r2, #56	@ 0x38
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fe24 	bl	80031c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fd96 	bl	80010c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2340      	movs	r3, #64	@ 0x40
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ae:	2355      	movs	r3, #85	@ 0x55
 80005b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe30 	bl	8001228 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ce:	f000 f909 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2104      	movs	r1, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f92d 	bl	800184c <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005f8:	f000 f8f4 	bl	80007e4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	@ 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000608:	4b20      	ldr	r3, [pc, #128]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800060e:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000610:	4a20      	ldr	r2, [pc, #128]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000612:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000628:	220c      	movs	r2, #12
 800062a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000644:	4811      	ldr	r0, [pc, #68]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000646:	f001 ff51 	bl	80024ec <HAL_UART_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000650:	f000 f8c8 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000654:	2100      	movs	r1, #0
 8000656:	480d      	ldr	r0, [pc, #52]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 8000658:	f002 fcec 	bl	8003034 <HAL_UARTEx_SetTxFifoThreshold>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000662:	f000 f8bf 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4808      	ldr	r0, [pc, #32]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 800066a:	f002 fd21 	bl	80030b0 <HAL_UARTEx_SetRxFifoThreshold>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000674:	f000 f8b6 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_LPUART1_UART_Init+0x88>)
 800067a:	f002 fca2 	bl	8002fc2 <HAL_UARTEx_DisableFifoMode>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000684:	f000 f8ae 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40008000 	.word	0x40008000
 8000694:	00033324 	.word	0x00033324

08000698 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006aa:	4a16      	ldr	r2, [pc, #88]	@ (8000704 <MX_TIM6_Init+0x6c>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42500 - 1;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006b0:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80006b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006ca:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006cc:	f001 fd16 	bl	80020fc <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80006d6:	f000 f885 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	@ (8000700 <MX_TIM6_Init+0x68>)
 80006e8:	f001 fe72 	bl	80023d0 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f000 f877 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000bc 	.word	0x200000bc
 8000704:	40001000 	.word	0x40001000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a2e      	ldr	r2, [pc, #184]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <MX_GPIO_Init+0xd4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <MX_GPIO_Init+0xd4>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_GPIO_Init+0xd4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_GPIO_Init+0xd4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000786:	f000 fc45 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480f      	ldr	r0, [pc, #60]	@ (80007e0 <MX_GPIO_Init+0xd8>)
 80007a2:	f000 fab5 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c0:	f000 faa6 	bl	8000d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2028      	movs	r0, #40	@ 0x28
 80007ca:	f000 fa6c 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ce:	2028      	movs	r0, #40	@ 0x28
 80007d0:	f000 fa83 	bl	8000cda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000800 	.word	0x48000800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	@ 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	@ 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000826:	f000 fcef 	bl	8001208 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09e      	sub	sp, #120	@ 0x78
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2250      	movs	r2, #80	@ 0x50
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fcb5 	bl	80031c8 <memset>
  if(huart->Instance==LPUART1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <HAL_UART_MspInit+0xa8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d136      	bne.n	80008d6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fa05 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000880:	f7ff ffb0 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <HAL_UART_MspInit+0xac>)
 8000886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000888:	4a16      	ldr	r2, [pc, #88]	@ (80008e4 <HAL_UART_MspInit+0xac>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <HAL_UART_MspInit+0xac>)
 8000892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_UART_MspInit+0xac>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <HAL_UART_MspInit+0xac>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_UART_MspInit+0xac>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b4:	230c      	movs	r3, #12
 80008b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008c4:	230c      	movs	r3, #12
 80008c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d2:	f000 fa1d 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3778      	adds	r7, #120	@ 0x78
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40008000 	.word	0x40008000
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <HAL_TIM_Base_MspInit+0x38>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10b      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f899 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}

08000986 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800098a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800098e:	f000 fb73 	bl	8001078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 fbf5 	bl	80031d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ee:	f7ff fd8b 	bl	8000508 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a00:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 8000a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a08:	20000114 	.word	0x20000114

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>

08000a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f939 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f80e 	bl	8000a40 <HAL_InitTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e001      	b.n	8000a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a30:	f7ff fede 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a34:	79fb      	ldrb	r3, [r7, #7]

}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <HAL_InitTick+0x68>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d022      	beq.n	8000a9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_InitTick+0x6c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <HAL_InitTick+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f944 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d10f      	bne.n	8000a94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	d809      	bhi.n	8000a8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a82:	f000 f910 	bl	8000ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_InitTick+0x70>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e007      	b.n	8000a9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e004      	b.n	8000a9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e001      	b.n	8000a9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a03      	ldr	r2, [pc, #12]	@ (8000ad0 <HAL_IncTick+0x1c>)
 8000ac4:	6013      	str	r3, [r2, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	20000110 	.word	0x20000110
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000110 	.word	0x20000110

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	@ (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4907      	ldr	r1, [pc, #28]	@ (8000b8c <__NVIC_EnableIRQ+0x38>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	@ (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	@ (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	@ 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	@ 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c70:	f7ff ff8e 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff29 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff40 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff90 	bl	8000be4 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5f 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff33 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa4 	bl	8000c4c <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d1e:	e15a      	b.n	8000fd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 814c 	beq.w	8000fd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	6939      	ldr	r1, [r7, #16]
 8000e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0203 	and.w	r2, r3, #3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80a6 	beq.w	8000fd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e88:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e90:	4b58      	ldr	r3, [pc, #352]	@ (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9c:	4a56      	ldr	r2, [pc, #344]	@ (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ec6:	d01f      	beq.n	8000f08 <HAL_GPIO_Init+0x1f8>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a4c      	ldr	r2, [pc, #304]	@ (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1f4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8001000 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1f0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a4a      	ldr	r2, [pc, #296]	@ (8001004 <HAL_GPIO_Init+0x2f4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1ec>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a49      	ldr	r2, [pc, #292]	@ (8001008 <HAL_GPIO_Init+0x2f8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a48      	ldr	r2, [pc, #288]	@ (800100c <HAL_GPIO_Init+0x2fc>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1e4>
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	e00a      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	e008      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000efc:	2303      	movs	r3, #3
 8000efe:	e004      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1a:	4937      	ldr	r1, [pc, #220]	@ (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f28:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4c:	4a30      	ldr	r2, [pc, #192]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f52:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f76:	4a26      	ldr	r2, [pc, #152]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fca:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f47f ae9d 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48000800 	.word	0x48000800
 8001004:	48000c00 	.word	0x48000c00
 8001008:	48001000 	.word	0x48001000
 800100c:	48001400 	.word	0x48001400
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43d9      	mvns	r1, r3
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	400b      	ands	r3, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f806 	bl	80010a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d141      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ce:	4b4b      	ldr	r3, [pc, #300]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010da:	d131      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010dc:	4b47      	ldr	r3, [pc, #284]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e2:	4a46      	ldr	r2, [pc, #280]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	4b43      	ldr	r3, [pc, #268]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f4:	4a41      	ldr	r2, [pc, #260]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2232      	movs	r2, #50	@ 0x32
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a3f      	ldr	r2, [pc, #252]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001112:	e002      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001126:	d102      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f2      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112e:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113a:	d158      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e057      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800114c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001150:	e04d      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001158:	d141      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001166:	d131      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2232      	movs	r2, #50	@ 0x32
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119e:	e002      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b2:	d102      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f2      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c6:	d112      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e011      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011dc:	e007      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40007000 	.word	0x40007000
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001216:	6093      	str	r3, [r2, #8]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e2fe      	b.n	8001838 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d075      	beq.n	8001332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001246:	4b97      	ldr	r3, [pc, #604]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001250:	4b94      	ldr	r3, [pc, #592]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x3e>
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d002      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b8d      	ldr	r3, [pc, #564]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d05b      	beq.n	8001330 <HAL_RCC_OscConfig+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e2d9      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128c:	d106      	bne.n	800129c <HAL_RCC_OscConfig+0x74>
 800128e:	4b85      	ldr	r3, [pc, #532]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a84      	ldr	r2, [pc, #528]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7f      	ldr	r3, [pc, #508]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7e      	ldr	r2, [pc, #504]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b7c      	ldr	r3, [pc, #496]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7b      	ldr	r2, [pc, #492]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 80012c0:	4b78      	ldr	r3, [pc, #480]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a77      	ldr	r2, [pc, #476]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b75      	ldr	r3, [pc, #468]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a74      	ldr	r2, [pc, #464]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbfa 	bl	8000ad8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fbf6 	bl	8000ad8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e29e      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	4b6a      	ldr	r3, [pc, #424]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xc0>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fbe6 	bl	8000ad8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fbe2 	bl	8000ad8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e28a      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	4b60      	ldr	r3, [pc, #384]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0xe8>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d075      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4b59      	ldr	r3, [pc, #356]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001348:	4b56      	ldr	r3, [pc, #344]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x136>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d002      	beq.n	8001364 <HAL_RCC_OscConfig+0x13c>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d11f      	bne.n	80013a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	4b4f      	ldr	r3, [pc, #316]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x154>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e25d      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b49      	ldr	r3, [pc, #292]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	4946      	ldr	r1, [pc, #280]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001390:	4b45      	ldr	r3, [pc, #276]	@ (80014a8 <HAL_RCC_OscConfig+0x280>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fb53 	bl	8000a40 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d043      	beq.n	8001428 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e249      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a3c      	ldr	r2, [pc, #240]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb8e 	bl	8000ad8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb8a 	bl	8000ad8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e232      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d2:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	061b      	lsls	r3, r3, #24
 80013ec:	492d      	ldr	r1, [pc, #180]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e01a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f4:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fb6a 	bl	8000ad8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fb66 	bl	8000ad8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e20e      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1e0>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d041      	beq.n	80014ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01c      	beq.n	8001478 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001444:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144e:	f7ff fb43 	bl	8000ad8 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fb3f 	bl	8000ad8 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1e7      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0ef      	beq.n	8001456 <HAL_RCC_OscConfig+0x22e>
 8001476:	e020      	b.n	80014ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fb26 	bl	8000ad8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800148e:	e00d      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fb22 	bl	8000ad8 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d906      	bls.n	80014ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1ca      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ac:	4b8c      	ldr	r3, [pc, #560]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ea      	bne.n	8001490 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80a6 	beq.w	8001614 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014cc:	4b84      	ldr	r3, [pc, #528]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x2b4>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x2b6>
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00d      	beq.n	80014fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a7e      	ldr	r2, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b7c      	ldr	r3, [pc, #496]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fe:	4b79      	ldr	r3, [pc, #484]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800150a:	4b76      	ldr	r3, [pc, #472]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a75      	ldr	r2, [pc, #468]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fadf 	bl	8000ad8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fadb 	bl	8000ad8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e183      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	4b6c      	ldr	r3, [pc, #432]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_RCC_OscConfig+0x32e>
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001554:	e024      	b.n	80015a0 <HAL_RCC_OscConfig+0x378>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b05      	cmp	r3, #5
 800155c:	d110      	bne.n	8001580 <HAL_RCC_OscConfig+0x358>
 800155e:	4b60      	ldr	r3, [pc, #384]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001564:	4a5e      	ldr	r2, [pc, #376]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156e:	4b5c      	ldr	r3, [pc, #368]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800157e:	e00f      	b.n	80015a0 <HAL_RCC_OscConfig+0x378>
 8001580:	4b57      	ldr	r3, [pc, #348]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001586:	4a56      	ldr	r2, [pc, #344]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001590:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001596:	4a52      	ldr	r2, [pc, #328]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d016      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa96 	bl	8000ad8 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fa92 	bl	8000ad8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e138      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c6:	4b46      	ldr	r3, [pc, #280]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ed      	beq.n	80015b0 <HAL_RCC_OscConfig+0x388>
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa7f 	bl	8000ad8 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fa7b 	bl	8000ad8 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e121      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f4:	4b3a      	ldr	r3, [pc, #232]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ed      	bne.n	80015de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001602:	7ffb      	ldrb	r3, [r7, #31]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	4a34      	ldr	r2, [pc, #208]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001612:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03c      	beq.n	800169a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800162a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800162e:	4a2c      	ldr	r2, [pc, #176]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fa4e 	bl	8000ad8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001640:	f7ff fa4a 	bl	8000ad8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0f2      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001654:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0ef      	beq.n	8001640 <HAL_RCC_OscConfig+0x418>
 8001660:	e01b      	b.n	800169a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fa31 	bl	8000ad8 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800167a:	f7ff fa2d 	bl	8000ad8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0d5      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800168e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ef      	bne.n	800167a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80c9 	beq.w	8001836 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	f000 8083 	beq.w	80017b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d15e      	bne.n	8001778 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80016c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fa07 	bl	8000ad8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	e00c      	b.n	80016e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fa03 	bl	8000ad8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d905      	bls.n	80016e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0ab      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e8:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ec      	bne.n	80016ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	4b52      	ldr	r3, [pc, #328]	@ (8001844 <HAL_RCC_OscConfig+0x61c>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6a11      	ldr	r1, [r2, #32]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001704:	3a01      	subs	r2, #1
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800170e:	0212      	lsls	r2, r2, #8
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001716:	0852      	lsrs	r2, r2, #1
 8001718:	3a01      	subs	r2, #1
 800171a:	0552      	lsls	r2, r2, #21
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001722:	0852      	lsrs	r2, r2, #1
 8001724:	3a01      	subs	r2, #1
 8001726:	0652      	lsls	r2, r2, #25
 8001728:	4311      	orrs	r1, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800172e:	06d2      	lsls	r2, r2, #27
 8001730:	430a      	orrs	r2, r1
 8001732:	4943      	ldr	r1, [pc, #268]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 8001734:	4313      	orrs	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a40      	ldr	r2, [pc, #256]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001742:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001744:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a3d      	ldr	r2, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f9c2 	bl	8000ad8 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff f9be 	bl	8000ad8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e066      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x530>
 8001776:	e05e      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a30      	ldr	r2, [pc, #192]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f9a8 	bl	8000ad8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f9a4 	bl	8000ad8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e04c      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	4924      	ldr	r1, [pc, #144]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017b0:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <HAL_RCC_OscConfig+0x620>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	60cb      	str	r3, [r1, #12]
 80017b6:	e03e      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e039      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d12c      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	3b01      	subs	r3, #1
 80017e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d123      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11b      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d113      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d109      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	019f800c 	.word	0x019f800c
 8001848:	feeefffc 	.word	0xfeeefffc

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e11e      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b91      	ldr	r3, [pc, #580]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b8e      	ldr	r3, [pc, #568]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 020f 	bic.w	r2, r3, #15
 800187a:	498c      	ldr	r1, [pc, #560]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b8a      	ldr	r3, [pc, #552]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e106      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d073      	beq.n	8001988 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d129      	bne.n	80018fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	4b81      	ldr	r3, [pc, #516]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0f4      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018b8:	f000 f99e 	bl	8001bf8 <RCC_GetSysClockFreqFromPLLSource>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ab4 <HAL_RCC_ClockConfig+0x268>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d93f      	bls.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d033      	beq.n	8001946 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d12f      	bne.n	8001946 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018e6:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018ee:	4a70      	ldr	r2, [pc, #448]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e024      	b.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d107      	bne.n	8001914 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001904:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0c6      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0be      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001924:	f000 f8ce 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4a61      	ldr	r2, [pc, #388]	@ (8001ab4 <HAL_RCC_ClockConfig+0x268>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d909      	bls.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001932:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800193a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001940:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4957      	ldr	r1, [pc, #348]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001958:	f7ff f8be 	bl	8000ad8 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff f8ba 	bl	8000ad8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e095      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a42      	ldr	r2, [pc, #264]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019b8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019c0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4936      	ldr	r1, [pc, #216]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
 80019da:	e008      	b.n	80019ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b80      	cmp	r3, #128	@ 0x80
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019e2:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a32      	ldr	r2, [pc, #200]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d21d      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 020f 	bic.w	r2, r3, #15
 8001a04:	4929      	ldr	r1, [pc, #164]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff f864 	bl	8000ad8 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f860 	bl	8000ad8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e03b      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1ed      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4917      	ldr	r1, [pc, #92]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490f      	ldr	r1, [pc, #60]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a76:	f000 f825 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <HAL_RCC_ClockConfig+0x26c>)
 8001a88:	5ccb      	ldrb	r3, [r1, r3]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_RCC_ClockConfig+0x270>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe ffd0 	bl	8000a40 <HAL_InitTick>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	04c4b400 	.word	0x04c4b400
 8001ab8:	08003238 	.word	0x08003238
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aca:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e047      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001adc:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	e03e      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d136      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	68d2      	ldr	r2, [r2, #12]
 8001b24:	0a12      	lsrs	r2, r2, #8
 8001b26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
      break;
 8001b30:	e00c      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3c:	68d2      	ldr	r2, [r2, #12]
 8001b3e:	0a12      	lsrs	r2, r2, #8
 8001b40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
      break;
 8001b4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0e5b      	lsrs	r3, r3, #25
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e001      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b6c:	693b      	ldr	r3, [r7, #16]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	016e3600 	.word	0x016e3600

08001b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4904      	ldr	r1, [pc, #16]	@ (8001bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08003248 	.word	0x08003248

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bd0:	f7ff ffda 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4904      	ldr	r1, [pc, #16]	@ (8001bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003248 	.word	0x08003248

08001bf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d10c      	bne.n	8001c36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1c:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c26:	68d2      	ldr	r2, [r2, #12]
 8001c28:	0a12      	lsrs	r2, r2, #8
 8001c2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
    break;
 8001c34:	e00c      	b.n	8001c50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	0a12      	lsrs	r2, r2, #8
 8001c44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c48:	fb02 f303 	mul.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    break;
 8001c4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0e5b      	lsrs	r3, r3, #25
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	016e3600 	.word	0x016e3600
 8001c80:	00f42400 	.word	0x00f42400

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c90:	2300      	movs	r3, #0
 8001c92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8098 	beq.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cce:	4b3a      	ldr	r3, [pc, #232]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a39      	ldr	r2, [pc, #228]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cda:	f7fe fefd 	bl	8000ad8 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7fe fef9 	bl	8000ad8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	74fb      	strb	r3, [r7, #19]
        break;
 8001cf4:	e005      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf6:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ef      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d159      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01e      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d019      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d36:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d40:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d46:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d50:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7fe feb9 	bl	8000ad8 <HAL_GetTick>
 8001d66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d68:	e00b      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe feb5 	bl	8000ad8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d902      	bls.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	74fb      	strb	r3, [r7, #19]
            break;
 8001d80:	e006      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d82:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ec      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da4:	4903      	ldr	r1, [pc, #12]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001dac:	e008      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	74bb      	strb	r3, [r7, #18]
 8001db2:	e005      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc0:	7c7b      	ldrb	r3, [r7, #17]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4ba7      	ldr	r3, [pc, #668]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	4aa6      	ldr	r2, [pc, #664]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dde:	4ba1      	ldr	r3, [pc, #644]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de4:	f023 0203 	bic.w	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	499d      	ldr	r1, [pc, #628]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e00:	4b98      	ldr	r3, [pc, #608]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	f023 020c 	bic.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4995      	ldr	r1, [pc, #596]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e22:	4b90      	ldr	r3, [pc, #576]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	498c      	ldr	r1, [pc, #560]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e44:	4b87      	ldr	r3, [pc, #540]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	4984      	ldr	r1, [pc, #528]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	497b      	ldr	r1, [pc, #492]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e88:	4b76      	ldr	r3, [pc, #472]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4973      	ldr	r1, [pc, #460]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	496a      	ldr	r1, [pc, #424]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ecc:	4b65      	ldr	r3, [pc, #404]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4962      	ldr	r1, [pc, #392]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eee:	4b5d      	ldr	r3, [pc, #372]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	4959      	ldr	r1, [pc, #356]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f10:	4b54      	ldr	r3, [pc, #336]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f16:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	4951      	ldr	r1, [pc, #324]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f32:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	4948      	ldr	r1, [pc, #288]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f50:	d105      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f52:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4a43      	ldr	r2, [pc, #268]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f5c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d015      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	493a      	ldr	r1, [pc, #232]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f88:	d105      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f8a:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	4a35      	ldr	r2, [pc, #212]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f94:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fa2:	4b30      	ldr	r3, [pc, #192]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb0:	492c      	ldr	r1, [pc, #176]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc0:	d105      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fcc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d015      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe8:	491e      	ldr	r1, [pc, #120]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ff8:	d105      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002004:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002018:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	4910      	ldr	r1, [pc, #64]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002030:	d105      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002038:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800203c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d018      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002050:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4902      	ldr	r1, [pc, #8]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002064:	40021000 	.word	0x40021000
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800206e:	d105      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a20      	ldr	r2, [pc, #128]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002088:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	4918      	ldr	r1, [pc, #96]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a12      	ldr	r2, [pc, #72]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	490a      	ldr	r1, [pc, #40]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e049      	b.n	80021a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fbe0 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f000 f89e 	bl	800227c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d001      	beq.n	80021c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e047      	b.n	8002254 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <HAL_TIM_Base_Start+0xb4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_TIM_Base_Start+0x66>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021de:	d018      	beq.n	8002212 <HAL_TIM_Base_Start+0x66>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_TIM_Base_Start+0xb8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_TIM_Base_Start+0x66>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_TIM_Base_Start+0xbc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_TIM_Base_Start+0x66>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_TIM_Base_Start+0xc0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_TIM_Base_Start+0x66>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_TIM_Base_Start+0xc4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_TIM_Base_Start+0x66>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_TIM_Base_Start+0xc8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d115      	bne.n	800223e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_TIM_Base_Start+0xcc>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d015      	beq.n	8002250 <HAL_TIM_Base_Start+0xa4>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222a:	d011      	beq.n	8002250 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223c:	e008      	b.n	8002250 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e000      	b.n	8002252 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40013400 	.word	0x40013400
 8002270:	40014000 	.word	0x40014000
 8002274:	40015000 	.word	0x40015000
 8002278:	00010007 	.word	0x00010007

0800227c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a48      	ldr	r2, [pc, #288]	@ (80023b0 <TIM_Base_SetConfig+0x134>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229a:	d00f      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a45      	ldr	r2, [pc, #276]	@ (80023b4 <TIM_Base_SetConfig+0x138>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00b      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a44      	ldr	r2, [pc, #272]	@ (80023b8 <TIM_Base_SetConfig+0x13c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a43      	ldr	r2, [pc, #268]	@ (80023bc <TIM_Base_SetConfig+0x140>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d003      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a42      	ldr	r2, [pc, #264]	@ (80023c0 <TIM_Base_SetConfig+0x144>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a37      	ldr	r2, [pc, #220]	@ (80023b0 <TIM_Base_SetConfig+0x134>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022dc:	d01b      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a34      	ldr	r2, [pc, #208]	@ (80023b4 <TIM_Base_SetConfig+0x138>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d017      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a33      	ldr	r2, [pc, #204]	@ (80023b8 <TIM_Base_SetConfig+0x13c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a32      	ldr	r2, [pc, #200]	@ (80023bc <TIM_Base_SetConfig+0x140>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00f      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <TIM_Base_SetConfig+0x148>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <TIM_Base_SetConfig+0x14c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a30      	ldr	r2, [pc, #192]	@ (80023cc <TIM_Base_SetConfig+0x150>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0x9a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <TIM_Base_SetConfig+0x144>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <TIM_Base_SetConfig+0x134>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <TIM_Base_SetConfig+0x100>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <TIM_Base_SetConfig+0x140>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00f      	beq.n	800237c <TIM_Base_SetConfig+0x100>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <TIM_Base_SetConfig+0x148>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00b      	beq.n	800237c <TIM_Base_SetConfig+0x100>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <TIM_Base_SetConfig+0x14c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0x100>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <TIM_Base_SetConfig+0x150>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x100>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <TIM_Base_SetConfig+0x144>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f023 0201 	bic.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
  }
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40013400 	.word	0x40013400
 80023c0:	40015000 	.word	0x40015000
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400
 80023cc:	40014800 	.word	0x40014800

080023d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e06f      	b.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a31      	ldr	r2, [pc, #196]	@ (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a30      	ldr	r2, [pc, #192]	@ (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2e      	ldr	r2, [pc, #184]	@ (80024dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800242c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800243e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1e      	ldr	r2, [pc, #120]	@ (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01d      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002468:	d018      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1a      	ldr	r2, [pc, #104]	@ (80024e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a11      	ldr	r2, [pc, #68]	@ (80024dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10c      	bne.n	80024b6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40013400 	.word	0x40013400
 80024dc:	40015000 	.word	0x40015000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40014000 	.word	0x40014000

080024ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e042      	b.n	8002584 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fe f991 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2224      	movs	r2, #36	@ 0x24
 800251a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fb24 	bl	8002b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f825 	bl	800258c <UART_SetConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e01b      	b.n	8002584 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800255a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800256a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fba3 	bl	8002cc8 <UART_CheckIdleState>
 8002582:	4603      	mov	r3, r0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b08c      	sub	sp, #48	@ 0x30
 8002592:	af00      	add	r7, sp, #0
 8002594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4baa      	ldr	r3, [pc, #680]	@ (8002864 <UART_SetConfig+0x2d8>)
 80025bc:	4013      	ands	r3, r2
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a9f      	ldr	r2, [pc, #636]	@ (8002868 <UART_SetConfig+0x2dc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f4:	4313      	orrs	r3, r2
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002602:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800260c:	430b      	orrs	r3, r1
 800260e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	f023 010f 	bic.w	r1, r3, #15
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a90      	ldr	r2, [pc, #576]	@ (800286c <UART_SetConfig+0x2e0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d125      	bne.n	800267c <UART_SetConfig+0xf0>
 8002630:	4b8f      	ldr	r3, [pc, #572]	@ (8002870 <UART_SetConfig+0x2e4>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b03      	cmp	r3, #3
 800263c:	d81a      	bhi.n	8002674 <UART_SetConfig+0xe8>
 800263e:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <UART_SetConfig+0xb8>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	08002665 	.word	0x08002665
 800264c:	0800265d 	.word	0x0800265d
 8002650:	0800266d 	.word	0x0800266d
 8002654:	2301      	movs	r3, #1
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800265a:	e116      	b.n	800288a <UART_SetConfig+0x2fe>
 800265c:	2302      	movs	r3, #2
 800265e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002662:	e112      	b.n	800288a <UART_SetConfig+0x2fe>
 8002664:	2304      	movs	r3, #4
 8002666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800266a:	e10e      	b.n	800288a <UART_SetConfig+0x2fe>
 800266c:	2308      	movs	r3, #8
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002672:	e10a      	b.n	800288a <UART_SetConfig+0x2fe>
 8002674:	2310      	movs	r3, #16
 8002676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800267a:	e106      	b.n	800288a <UART_SetConfig+0x2fe>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7c      	ldr	r2, [pc, #496]	@ (8002874 <UART_SetConfig+0x2e8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d138      	bne.n	80026f8 <UART_SetConfig+0x16c>
 8002686:	4b7a      	ldr	r3, [pc, #488]	@ (8002870 <UART_SetConfig+0x2e4>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d82d      	bhi.n	80026f0 <UART_SetConfig+0x164>
 8002694:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <UART_SetConfig+0x110>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026d1 	.word	0x080026d1
 80026a0:	080026f1 	.word	0x080026f1
 80026a4:	080026f1 	.word	0x080026f1
 80026a8:	080026f1 	.word	0x080026f1
 80026ac:	080026e1 	.word	0x080026e1
 80026b0:	080026f1 	.word	0x080026f1
 80026b4:	080026f1 	.word	0x080026f1
 80026b8:	080026f1 	.word	0x080026f1
 80026bc:	080026d9 	.word	0x080026d9
 80026c0:	080026f1 	.word	0x080026f1
 80026c4:	080026f1 	.word	0x080026f1
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	080026e9 	.word	0x080026e9
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026d6:	e0d8      	b.n	800288a <UART_SetConfig+0x2fe>
 80026d8:	2302      	movs	r3, #2
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026de:	e0d4      	b.n	800288a <UART_SetConfig+0x2fe>
 80026e0:	2304      	movs	r3, #4
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026e6:	e0d0      	b.n	800288a <UART_SetConfig+0x2fe>
 80026e8:	2308      	movs	r3, #8
 80026ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ee:	e0cc      	b.n	800288a <UART_SetConfig+0x2fe>
 80026f0:	2310      	movs	r3, #16
 80026f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026f6:	e0c8      	b.n	800288a <UART_SetConfig+0x2fe>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002878 <UART_SetConfig+0x2ec>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d125      	bne.n	800274e <UART_SetConfig+0x1c2>
 8002702:	4b5b      	ldr	r3, [pc, #364]	@ (8002870 <UART_SetConfig+0x2e4>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800270c:	2b30      	cmp	r3, #48	@ 0x30
 800270e:	d016      	beq.n	800273e <UART_SetConfig+0x1b2>
 8002710:	2b30      	cmp	r3, #48	@ 0x30
 8002712:	d818      	bhi.n	8002746 <UART_SetConfig+0x1ba>
 8002714:	2b20      	cmp	r3, #32
 8002716:	d00a      	beq.n	800272e <UART_SetConfig+0x1a2>
 8002718:	2b20      	cmp	r3, #32
 800271a:	d814      	bhi.n	8002746 <UART_SetConfig+0x1ba>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <UART_SetConfig+0x19a>
 8002720:	2b10      	cmp	r3, #16
 8002722:	d008      	beq.n	8002736 <UART_SetConfig+0x1aa>
 8002724:	e00f      	b.n	8002746 <UART_SetConfig+0x1ba>
 8002726:	2300      	movs	r3, #0
 8002728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800272c:	e0ad      	b.n	800288a <UART_SetConfig+0x2fe>
 800272e:	2302      	movs	r3, #2
 8002730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002734:	e0a9      	b.n	800288a <UART_SetConfig+0x2fe>
 8002736:	2304      	movs	r3, #4
 8002738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800273c:	e0a5      	b.n	800288a <UART_SetConfig+0x2fe>
 800273e:	2308      	movs	r3, #8
 8002740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002744:	e0a1      	b.n	800288a <UART_SetConfig+0x2fe>
 8002746:	2310      	movs	r3, #16
 8002748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800274c:	e09d      	b.n	800288a <UART_SetConfig+0x2fe>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4a      	ldr	r2, [pc, #296]	@ (800287c <UART_SetConfig+0x2f0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d125      	bne.n	80027a4 <UART_SetConfig+0x218>
 8002758:	4b45      	ldr	r3, [pc, #276]	@ (8002870 <UART_SetConfig+0x2e4>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002762:	2bc0      	cmp	r3, #192	@ 0xc0
 8002764:	d016      	beq.n	8002794 <UART_SetConfig+0x208>
 8002766:	2bc0      	cmp	r3, #192	@ 0xc0
 8002768:	d818      	bhi.n	800279c <UART_SetConfig+0x210>
 800276a:	2b80      	cmp	r3, #128	@ 0x80
 800276c:	d00a      	beq.n	8002784 <UART_SetConfig+0x1f8>
 800276e:	2b80      	cmp	r3, #128	@ 0x80
 8002770:	d814      	bhi.n	800279c <UART_SetConfig+0x210>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <UART_SetConfig+0x1f0>
 8002776:	2b40      	cmp	r3, #64	@ 0x40
 8002778:	d008      	beq.n	800278c <UART_SetConfig+0x200>
 800277a:	e00f      	b.n	800279c <UART_SetConfig+0x210>
 800277c:	2300      	movs	r3, #0
 800277e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002782:	e082      	b.n	800288a <UART_SetConfig+0x2fe>
 8002784:	2302      	movs	r3, #2
 8002786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800278a:	e07e      	b.n	800288a <UART_SetConfig+0x2fe>
 800278c:	2304      	movs	r3, #4
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002792:	e07a      	b.n	800288a <UART_SetConfig+0x2fe>
 8002794:	2308      	movs	r3, #8
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800279a:	e076      	b.n	800288a <UART_SetConfig+0x2fe>
 800279c:	2310      	movs	r3, #16
 800279e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027a2:	e072      	b.n	800288a <UART_SetConfig+0x2fe>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a35      	ldr	r2, [pc, #212]	@ (8002880 <UART_SetConfig+0x2f4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12a      	bne.n	8002804 <UART_SetConfig+0x278>
 80027ae:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <UART_SetConfig+0x2e4>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027bc:	d01a      	beq.n	80027f4 <UART_SetConfig+0x268>
 80027be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027c2:	d81b      	bhi.n	80027fc <UART_SetConfig+0x270>
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027c8:	d00c      	beq.n	80027e4 <UART_SetConfig+0x258>
 80027ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ce:	d815      	bhi.n	80027fc <UART_SetConfig+0x270>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <UART_SetConfig+0x250>
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d8:	d008      	beq.n	80027ec <UART_SetConfig+0x260>
 80027da:	e00f      	b.n	80027fc <UART_SetConfig+0x270>
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027e2:	e052      	b.n	800288a <UART_SetConfig+0x2fe>
 80027e4:	2302      	movs	r3, #2
 80027e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ea:	e04e      	b.n	800288a <UART_SetConfig+0x2fe>
 80027ec:	2304      	movs	r3, #4
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027f2:	e04a      	b.n	800288a <UART_SetConfig+0x2fe>
 80027f4:	2308      	movs	r3, #8
 80027f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027fa:	e046      	b.n	800288a <UART_SetConfig+0x2fe>
 80027fc:	2310      	movs	r3, #16
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002802:	e042      	b.n	800288a <UART_SetConfig+0x2fe>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <UART_SetConfig+0x2dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d13a      	bne.n	8002884 <UART_SetConfig+0x2f8>
 800280e:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <UART_SetConfig+0x2e4>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800281c:	d01a      	beq.n	8002854 <UART_SetConfig+0x2c8>
 800281e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002822:	d81b      	bhi.n	800285c <UART_SetConfig+0x2d0>
 8002824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002828:	d00c      	beq.n	8002844 <UART_SetConfig+0x2b8>
 800282a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800282e:	d815      	bhi.n	800285c <UART_SetConfig+0x2d0>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <UART_SetConfig+0x2b0>
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002838:	d008      	beq.n	800284c <UART_SetConfig+0x2c0>
 800283a:	e00f      	b.n	800285c <UART_SetConfig+0x2d0>
 800283c:	2300      	movs	r3, #0
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002842:	e022      	b.n	800288a <UART_SetConfig+0x2fe>
 8002844:	2302      	movs	r3, #2
 8002846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800284a:	e01e      	b.n	800288a <UART_SetConfig+0x2fe>
 800284c:	2304      	movs	r3, #4
 800284e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002852:	e01a      	b.n	800288a <UART_SetConfig+0x2fe>
 8002854:	2308      	movs	r3, #8
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285a:	e016      	b.n	800288a <UART_SetConfig+0x2fe>
 800285c:	2310      	movs	r3, #16
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002862:	e012      	b.n	800288a <UART_SetConfig+0x2fe>
 8002864:	cfff69f3 	.word	0xcfff69f3
 8002868:	40008000 	.word	0x40008000
 800286c:	40013800 	.word	0x40013800
 8002870:	40021000 	.word	0x40021000
 8002874:	40004400 	.word	0x40004400
 8002878:	40004800 	.word	0x40004800
 800287c:	40004c00 	.word	0x40004c00
 8002880:	40005000 	.word	0x40005000
 8002884:	2310      	movs	r3, #16
 8002886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4aae      	ldr	r2, [pc, #696]	@ (8002b48 <UART_SetConfig+0x5bc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	f040 8097 	bne.w	80029c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002896:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800289a:	2b08      	cmp	r3, #8
 800289c:	d823      	bhi.n	80028e6 <UART_SetConfig+0x35a>
 800289e:	a201      	add	r2, pc, #4	@ (adr r2, 80028a4 <UART_SetConfig+0x318>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	080028e7 	.word	0x080028e7
 80028ac:	080028d1 	.word	0x080028d1
 80028b0:	080028e7 	.word	0x080028e7
 80028b4:	080028d7 	.word	0x080028d7
 80028b8:	080028e7 	.word	0x080028e7
 80028bc:	080028e7 	.word	0x080028e7
 80028c0:	080028e7 	.word	0x080028e7
 80028c4:	080028df 	.word	0x080028df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c8:	f7ff f96a 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 80028cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028ce:	e010      	b.n	80028f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d0:	4b9e      	ldr	r3, [pc, #632]	@ (8002b4c <UART_SetConfig+0x5c0>)
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028d4:	e00d      	b.n	80028f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d6:	f7ff f8f5 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 80028da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028dc:	e009      	b.n	80028f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028e4:	e005      	b.n	80028f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80028f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8130 	beq.w	8002b5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	4a94      	ldr	r2, [pc, #592]	@ (8002b50 <UART_SetConfig+0x5c4>)
 8002900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002904:	461a      	mov	r2, r3
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	fbb3 f3f2 	udiv	r3, r3, r2
 800290c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	429a      	cmp	r2, r3
 800291c:	d305      	bcc.n	800292a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	429a      	cmp	r2, r3
 8002928:	d903      	bls.n	8002932 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002930:	e113      	b.n	8002b5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	2200      	movs	r2, #0
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	60fa      	str	r2, [r7, #12]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	4a84      	ldr	r2, [pc, #528]	@ (8002b50 <UART_SetConfig+0x5c4>)
 8002940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002944:	b29b      	uxth	r3, r3
 8002946:	2200      	movs	r2, #0
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002954:	f7fd fc60 	bl	8000218 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	020b      	lsls	r3, r1, #8
 800296a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800296e:	0202      	lsls	r2, r0, #8
 8002970:	6979      	ldr	r1, [r7, #20]
 8002972:	6849      	ldr	r1, [r1, #4]
 8002974:	0849      	lsrs	r1, r1, #1
 8002976:	2000      	movs	r0, #0
 8002978:	460c      	mov	r4, r1
 800297a:	4605      	mov	r5, r0
 800297c:	eb12 0804 	adds.w	r8, r2, r4
 8002980:	eb43 0905 	adc.w	r9, r3, r5
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	469a      	mov	sl, r3
 800298c:	4693      	mov	fp, r2
 800298e:	4652      	mov	r2, sl
 8002990:	465b      	mov	r3, fp
 8002992:	4640      	mov	r0, r8
 8002994:	4649      	mov	r1, r9
 8002996:	f7fd fc3f 	bl	8000218 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4613      	mov	r3, r2
 80029a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029a8:	d308      	bcc.n	80029bc <UART_SetConfig+0x430>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029b0:	d204      	bcs.n	80029bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a3a      	ldr	r2, [r7, #32]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	e0ce      	b.n	8002b5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029c2:	e0ca      	b.n	8002b5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029cc:	d166      	bne.n	8002a9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80029ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d827      	bhi.n	8002a26 <UART_SetConfig+0x49a>
 80029d6:	a201      	add	r2, pc, #4	@ (adr r2, 80029dc <UART_SetConfig+0x450>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a09 	.word	0x08002a09
 80029e4:	08002a11 	.word	0x08002a11
 80029e8:	08002a27 	.word	0x08002a27
 80029ec:	08002a17 	.word	0x08002a17
 80029f0:	08002a27 	.word	0x08002a27
 80029f4:	08002a27 	.word	0x08002a27
 80029f8:	08002a27 	.word	0x08002a27
 80029fc:	08002a1f 	.word	0x08002a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a00:	f7ff f8ce 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 8002a04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a06:	e014      	b.n	8002a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff f8e0 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002a0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a0e:	e010      	b.n	8002a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a10:	4b4e      	ldr	r3, [pc, #312]	@ (8002b4c <UART_SetConfig+0x5c0>)
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a14:	e00d      	b.n	8002a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a16:	f7ff f855 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8002a1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a1c:	e009      	b.n	8002a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a24:	e005      	b.n	8002a32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8090 	beq.w	8002b5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	4a44      	ldr	r2, [pc, #272]	@ (8002b50 <UART_SetConfig+0x5c4>)
 8002a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a4c:	005a      	lsls	r2, r3, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	441a      	add	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	d916      	bls.n	8002a94 <UART_SetConfig+0x508>
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6c:	d212      	bcs.n	8002a94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	8bfb      	ldrh	r3, [r7, #30]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	8bfa      	ldrh	r2, [r7, #30]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	e062      	b.n	8002b5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a9a:	e05e      	b.n	8002b5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d828      	bhi.n	8002af6 <UART_SetConfig+0x56a>
 8002aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <UART_SetConfig+0x520>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002ae1 	.word	0x08002ae1
 8002ab8:	08002af7 	.word	0x08002af7
 8002abc:	08002ae7 	.word	0x08002ae7
 8002ac0:	08002af7 	.word	0x08002af7
 8002ac4:	08002af7 	.word	0x08002af7
 8002ac8:	08002af7 	.word	0x08002af7
 8002acc:	08002aef 	.word	0x08002aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f7ff f866 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ad6:	e014      	b.n	8002b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff f878 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002adc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ade:	e010      	b.n	8002b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <UART_SetConfig+0x5c0>)
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ae4:	e00d      	b.n	8002b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae6:	f7fe ffed 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8002aea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002aec:	e009      	b.n	8002b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002af4:	e005      	b.n	8002b02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b00:	bf00      	nop
    }

    if (pclk != 0U)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d028      	beq.n	8002b5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	4a10      	ldr	r2, [pc, #64]	@ (8002b50 <UART_SetConfig+0x5c4>)
 8002b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b12:	461a      	mov	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	441a      	add	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	d910      	bls.n	8002b54 <UART_SetConfig+0x5c8>
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d20c      	bcs.n	8002b54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e009      	b.n	8002b5a <UART_SetConfig+0x5ce>
 8002b46:	bf00      	nop
 8002b48:	40008000 	.word	0x40008000
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	08003250 	.word	0x08003250
      }
      else
      {
        ret = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002b76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3730      	adds	r7, #48	@ 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c82:	d10a      	bne.n	8002c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b098      	sub	sp, #96	@ 0x60
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd8:	f7fd fefe 	bl	8000ad8 <HAL_GetTick>
 8002cdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d12f      	bne.n	8002d4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f88e 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d022      	beq.n	8002d4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e6      	bne.n	8002d06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e063      	b.n	8002e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d149      	bne.n	8002dee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	2200      	movs	r2, #0
 8002d64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f857 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	623b      	str	r3, [r7, #32]
   return(result);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e6      	bne.n	8002d74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e012      	b.n	8002e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3758      	adds	r7, #88	@ 0x58
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2c:	e04f      	b.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e34:	d04b      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fd fe4f 	bl	8000ad8 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e04e      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d037      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b80      	cmp	r3, #128	@ 0x80
 8002e62:	d034      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b40      	cmp	r3, #64	@ 0x40
 8002e68:	d031      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d110      	bne.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f838 	bl	8002ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e029      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea8:	d111      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f81e 	bl	8002ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00f      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0a0      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b095      	sub	sp, #84	@ 0x54
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e6      	bne.n	8002efe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3308      	adds	r3, #8
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e3      	bne.n	8002f30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d118      	bne.n	8002fa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e6      	bne.n	8002f70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002fb6:	bf00      	nop
 8002fb8:	3754      	adds	r7, #84	@ 0x54
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e027      	b.n	8003028 <HAL_UARTEx_DisableFifoMode+0x66>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	@ 0x24
 8002fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003006:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e02d      	b.n	80030a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	@ 0x24
 8003058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f84f 	bl	800312c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e02d      	b.n	8003124 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	@ 0x24
 80030d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f811 	bl	800312c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800314c:	e031      	b.n	80031b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800314e:	2308      	movs	r3, #8
 8003150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003152:	2308      	movs	r3, #8
 8003154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	0e5b      	lsrs	r3, r3, #25
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	0f5b      	lsrs	r3, r3, #29
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003176:	7bbb      	ldrb	r3, [r7, #14]
 8003178:	7b3a      	ldrb	r2, [r7, #12]
 800317a:	4911      	ldr	r1, [pc, #68]	@ (80031c0 <UARTEx_SetNbDataToProcess+0x94>)
 800317c:	5c8a      	ldrb	r2, [r1, r2]
 800317e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003182:	7b3a      	ldrb	r2, [r7, #12]
 8003184:	490f      	ldr	r1, [pc, #60]	@ (80031c4 <UARTEx_SetNbDataToProcess+0x98>)
 8003186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003188:	fb93 f3f2 	sdiv	r3, r3, r2
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	7b7a      	ldrb	r2, [r7, #13]
 8003198:	4909      	ldr	r1, [pc, #36]	@ (80031c0 <UARTEx_SetNbDataToProcess+0x94>)
 800319a:	5c8a      	ldrb	r2, [r1, r2]
 800319c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80031a0:	7b7a      	ldrb	r2, [r7, #13]
 80031a2:	4908      	ldr	r1, [pc, #32]	@ (80031c4 <UARTEx_SetNbDataToProcess+0x98>)
 80031a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	08003268 	.word	0x08003268
 80031c4:	08003270 	.word	0x08003270

080031c8 <memset>:
 80031c8:	4402      	add	r2, r0
 80031ca:	4603      	mov	r3, r0
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d100      	bne.n	80031d2 <memset+0xa>
 80031d0:	4770      	bx	lr
 80031d2:	f803 1b01 	strb.w	r1, [r3], #1
 80031d6:	e7f9      	b.n	80031cc <memset+0x4>

080031d8 <__libc_init_array>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	4d0d      	ldr	r5, [pc, #52]	@ (8003210 <__libc_init_array+0x38>)
 80031dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003214 <__libc_init_array+0x3c>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	2600      	movs	r6, #0
 80031e4:	42a6      	cmp	r6, r4
 80031e6:	d109      	bne.n	80031fc <__libc_init_array+0x24>
 80031e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003218 <__libc_init_array+0x40>)
 80031ea:	4c0c      	ldr	r4, [pc, #48]	@ (800321c <__libc_init_array+0x44>)
 80031ec:	f000 f818 	bl	8003220 <_init>
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	2600      	movs	r6, #0
 80031f6:	42a6      	cmp	r6, r4
 80031f8:	d105      	bne.n	8003206 <__libc_init_array+0x2e>
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003200:	4798      	blx	r3
 8003202:	3601      	adds	r6, #1
 8003204:	e7ee      	b.n	80031e4 <__libc_init_array+0xc>
 8003206:	f855 3b04 	ldr.w	r3, [r5], #4
 800320a:	4798      	blx	r3
 800320c:	3601      	adds	r6, #1
 800320e:	e7f2      	b.n	80031f6 <__libc_init_array+0x1e>
 8003210:	08003280 	.word	0x08003280
 8003214:	08003280 	.word	0x08003280
 8003218:	08003280 	.word	0x08003280
 800321c:	08003284 	.word	0x08003284

08003220 <_init>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	bf00      	nop
 8003224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003226:	bc08      	pop	{r3}
 8003228:	469e      	mov	lr, r3
 800322a:	4770      	bx	lr

0800322c <_fini>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr
