
BlinkV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e0c  08002e0c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e0c  08002e0c  00003e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e14  08002e14  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e14  08002e14  00003e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e18  08002e18  00003e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002e28  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002e28  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bed8  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac6  00000000  00000000  0000ff14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  000119e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000739  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce5a  00000000  00000000  00012a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b25d  00000000  00000000  0002f8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b970c  00000000  00000000  0003ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025bc  00000000  00000000  000f4288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f6844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002db4 	.word	0x08002db4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002db4 	.word	0x08002db4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t b = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fa1c 	bl	800094e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f821 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f8b5 	bl	8000688 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 f869 	bl	80005f4 <MX_LPUART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Either line of code will work
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000522:	2120      	movs	r1, #32
 8000524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000528:	f000 fd4e 	bl	8000fc8 <HAL_GPIO_TogglePin>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_Delay(150);
 800052c:	2096      	movs	r0, #150	@ 0x96
 800052e:	f000 fa7f 	bl	8000a30 <HAL_Delay>

	  a++;
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <main+0x4c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <main+0x4c>)
 800053a:	6013      	str	r3, [r2, #0]
	  b++;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3301      	adds	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
	  c = a + b;
 8000542:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <main+0x4c>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	4a03      	ldr	r2, [pc, #12]	@ (8000558 <main+0x50>)
 800054c:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800054e:	bf00      	nop
 8000550:	e7e7      	b.n	8000522 <main+0x1a>
 8000552:	bf00      	nop
 8000554:	200000bc 	.word	0x200000bc
 8000558:	200000c0 	.word	0x200000c0

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	@ 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fbf6 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fd60 	bl	8001044 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	@ 0x40
 8000590:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059e:	2355      	movs	r3, #85	@ 0x55
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fdfa 	bl	80011ac <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f8d1 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f8f8 	bl	80017d0 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e6:	f000 f8bd 	bl	8000764 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 80005fa:	4a21      	ldr	r2, [pc, #132]	@ (8000680 <MX_LPUART1_UART_Init+0x8c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000600:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <MX_LPUART1_UART_Init+0x90>)
 8000602:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000618:	220c      	movs	r2, #12
 800061a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000630:	2200      	movs	r2, #0
 8000632:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000634:	4811      	ldr	r0, [pc, #68]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000636:	f001 fd23 	bl	8002080 <HAL_UART_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000640:	f000 f890 	bl	8000764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000644:	2100      	movs	r1, #0
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 8000648:	f002 fabe 	bl	8002bc8 <HAL_UARTEx_SetTxFifoThreshold>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000652:	f000 f887 	bl	8000764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000656:	2100      	movs	r1, #0
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 800065a:	f002 faf3 	bl	8002c44 <HAL_UARTEx_SetRxFifoThreshold>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000664:	f000 f87e 	bl	8000764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_LPUART1_UART_Init+0x88>)
 800066a:	f002 fa74 	bl	8002b56 <HAL_UARTEx_DisableFifoMode>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000674:	f000 f876 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000028 	.word	0x20000028
 8000680:	40008000 	.word	0x40008000
 8000684:	00033324 	.word	0x00033324

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b29      	ldr	r3, [pc, #164]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a28      	ldr	r2, [pc, #160]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b23      	ldr	r3, [pc, #140]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a22      	ldr	r2, [pc, #136]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b20      	ldr	r3, [pc, #128]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_GPIO_Init+0xd4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000706:	f000 fc47 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000710:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480f      	ldr	r0, [pc, #60]	@ (8000760 <MX_GPIO_Init+0xd8>)
 8000722:	f000 fab7 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000726:	2320      	movs	r3, #32
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000740:	f000 faa8 	bl	8000c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2028      	movs	r0, #40	@ 0x28
 800074a:	f000 fa6e 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074e:	2028      	movs	r0, #40	@ 0x28
 8000750:	f000 fa85 	bl	8000c5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	@ 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	48000800 	.word	0x48000800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6613      	str	r3, [r2, #96]	@ 0x60
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	6593      	str	r3, [r2, #88]	@ 0x58
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a6:	f000 fcf1 	bl	800118c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09e      	sub	sp, #120	@ 0x78
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2250      	movs	r2, #80	@ 0x50
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fabf 	bl	8002d5c <memset>
  if(huart->Instance==LPUART1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000860 <HAL_UART_MspInit+0xa8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d136      	bne.n	8000856 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007e8:	2320      	movs	r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fa07 	bl	8001c08 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000800:	f7ff ffb0 	bl	8000764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000804:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <HAL_UART_MspInit+0xac>)
 8000806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <HAL_UART_MspInit+0xac>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_UART_MspInit+0xac>)
 8000812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_UART_MspInit+0xac>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000820:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_UART_MspInit+0xac>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_UART_MspInit+0xac>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000834:	230c      	movs	r3, #12
 8000836:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000844:	230c      	movs	r3, #12
 8000846:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000852:	f000 fa1f 	bl	8000c94 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3778      	adds	r7, #120	@ 0x78
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40008000 	.word	0x40008000
 8000864:	40021000 	.word	0x40021000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <NMI_Handler+0x4>

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <MemManage_Handler+0x4>

08000880 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <UsageFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 f899 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008ce:	f000 fb95 	bl	8000ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <LoopForever+0x2>)
 80008fe:	4685      	mov	sp, r0
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
 800090a:	2300      	movs	r3, #0
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:
 800090e:	58d4      	ldr	r4, [r2, r3]
 8000910:	50c4      	str	r4, [r0, r3]
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:
 8000914:	18c4      	adds	r4, r0, r3
 8000916:	428c      	cmp	r4, r1
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
 800091e:	2300      	movs	r3, #0
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:
 8000926:	42a2      	cmp	r2, r4
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>
 800092a:	f002 fa1f 	bl	8002d6c <__libc_init_array>
 800092e:	f7ff fdeb 	bl	8000508 <main>

08000932 <LoopForever>:
 8000932:	e7fe      	b.n	8000932 <LoopForever>
 8000934:	2001c000 	.word	0x2001c000
 8000938:	20000000 	.word	0x20000000
 800093c:	2000000c 	.word	0x2000000c
 8000940:	08002e1c 	.word	0x08002e1c
 8000944:	2000000c 	.word	0x2000000c
 8000948:	200000c8 	.word	0x200000c8

0800094c <ADC1_2_IRQHandler>:
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>

0800094e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f95b 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f80e 	bl	8000980 <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e001      	b.n	8000974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000970:	f7ff fefe 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000974:	79fb      	ldrb	r3, [r7, #7]

}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_InitTick+0x68>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d022      	beq.n	80009da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <HAL_InitTick+0x6c>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <HAL_InitTick+0x68>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f966 	bl	8000c7a <HAL_SYSTICK_Config>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10f      	bne.n	80009d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d809      	bhi.n	80009ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ba:	2200      	movs	r2, #0
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c2:	f000 f932 	bl	8000c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_InitTick+0x70>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	e007      	b.n	80009de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e004      	b.n	80009de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e001      	b.n	80009de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_IncTick+0x20>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a03      	ldr	r2, [pc, #12]	@ (8000a10 <HAL_IncTick+0x1c>)
 8000a04:	6013      	str	r3, [r2, #0]
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	200000c4 	.word	0x200000c4
 8000a14:	20000008 	.word	0x20000008

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000c4 	.word	0x200000c4

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffee 	bl	8000a18 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a48:	d004      	beq.n	8000a54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_Delay+0x40>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a54:	bf00      	nop
 8000a56:	f7ff ffdf 	bl	8000a18 <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d8f7      	bhi.n	8000a56 <HAL_Delay+0x26>
  {
  }
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000008 	.word	0x20000008

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	@ (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	@ (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	@ (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	@ 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff29 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff40 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff90 	bl	8000b68 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5f 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff33 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa4 	bl	8000bd0 <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ca2:	e15a      	b.n	8000f5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 814c 	beq.w	8000f54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d005      	beq.n	8000cd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d130      	bne.n	8000d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	f003 0201 	and.w	r2, r3, #1
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d017      	beq.n	8000d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d123      	bne.n	8000dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	6939      	ldr	r1, [r7, #16]
 8000dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0203 	and.w	r2, r3, #3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80a6 	beq.w	8000f54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e08:	4b5b      	ldr	r3, [pc, #364]	@ (8000f78 <HAL_GPIO_Init+0x2e4>)
 8000e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8000f78 <HAL_GPIO_Init+0x2e4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e14:	4b58      	ldr	r3, [pc, #352]	@ (8000f78 <HAL_GPIO_Init+0x2e4>)
 8000e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e20:	4a56      	ldr	r2, [pc, #344]	@ (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e4a:	d01f      	beq.n	8000e8c <HAL_GPIO_Init+0x1f8>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f80 <HAL_GPIO_Init+0x2ec>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d019      	beq.n	8000e88 <HAL_GPIO_Init+0x1f4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4b      	ldr	r2, [pc, #300]	@ (8000f84 <HAL_GPIO_Init+0x2f0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d013      	beq.n	8000e84 <HAL_GPIO_Init+0x1f0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a4a      	ldr	r2, [pc, #296]	@ (8000f88 <HAL_GPIO_Init+0x2f4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d00d      	beq.n	8000e80 <HAL_GPIO_Init+0x1ec>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a49      	ldr	r2, [pc, #292]	@ (8000f8c <HAL_GPIO_Init+0x2f8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d007      	beq.n	8000e7c <HAL_GPIO_Init+0x1e8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a48      	ldr	r2, [pc, #288]	@ (8000f90 <HAL_GPIO_Init+0x2fc>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d101      	bne.n	8000e78 <HAL_GPIO_Init+0x1e4>
 8000e74:	2305      	movs	r3, #5
 8000e76:	e00a      	b.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e008      	b.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e80:	2303      	movs	r3, #3
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_Init+0x1fa>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9e:	4937      	ldr	r1, [pc, #220]	@ (8000f7c <HAL_GPIO_Init+0x2e8>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eac:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed0:	4a30      	ldr	r2, [pc, #192]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efa:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f00:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f24:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f4e:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <HAL_GPIO_Init+0x300>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f47f ae9d 	bne.w	8000ca4 <HAL_GPIO_Init+0x10>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48001000 	.word	0x48001000
 8000f90:	48001400 	.word	0x48001400
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43d9      	mvns	r1, r3
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	400b      	ands	r3, r1
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f806 	bl	800102c <HAL_GPIO_EXTI_Callback>
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d141      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001052:	4b4b      	ldr	r3, [pc, #300]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800105a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800105e:	d131      	bne.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001060:	4b47      	ldr	r3, [pc, #284]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	4a46      	ldr	r2, [pc, #280]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800106c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	4b43      	ldr	r3, [pc, #268]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001078:	4a41      	ldr	r2, [pc, #260]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800107e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001080:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2232      	movs	r2, #50	@ 0x32
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4a3f      	ldr	r2, [pc, #252]	@ (8001188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001096:	e002      	b.n	800109e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3b01      	subs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109e:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010aa:	d102      	bne.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f2      	bne.n	8001098 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b2:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010be:	d158      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e057      	b.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010d4:	e04d      	b.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010dc:	d141      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010de:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ea:	d131      	bne.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f2:	4a23      	ldr	r2, [pc, #140]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001104:	4a1e      	ldr	r2, [pc, #120]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2232      	movs	r2, #50	@ 0x32
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001122:	e002      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3b01      	subs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001136:	d102      	bne.n	800113e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f2      	bne.n	8001124 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114a:	d112      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e011      	b.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001160:	e007      	b.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001170:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40007000 	.word	0x40007000
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83

0800118c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119a:	6093      	str	r3, [r2, #8]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40007000 	.word	0x40007000

080011ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e2fe      	b.n	80017bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d075      	beq.n	80012b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ca:	4b97      	ldr	r3, [pc, #604]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d4:	4b94      	ldr	r3, [pc, #592]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b0c      	cmp	r3, #12
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_OscConfig+0x3e>
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d002      	beq.n	80011f0 <HAL_RCC_OscConfig+0x44>
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d10b      	bne.n	8001208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d05b      	beq.n	80012b4 <HAL_RCC_OscConfig+0x108>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d157      	bne.n	80012b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e2d9      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001210:	d106      	bne.n	8001220 <HAL_RCC_OscConfig+0x74>
 8001212:	4b85      	ldr	r3, [pc, #532]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a84      	ldr	r2, [pc, #528]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xb0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x98>
 800122a:	4b7f      	ldr	r3, [pc, #508]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7e      	ldr	r2, [pc, #504]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b7c      	ldr	r3, [pc, #496]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a7b      	ldr	r2, [pc, #492]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xb0>
 8001244:	4b78      	ldr	r3, [pc, #480]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a77      	ldr	r2, [pc, #476]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b75      	ldr	r3, [pc, #468]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a74      	ldr	r2, [pc, #464]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fbd8 	bl	8000a18 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fbd4 	bl	8000a18 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	@ 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e29e      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800127e:	4b6a      	ldr	r3, [pc, #424]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xc0>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fbc4 	bl	8000a18 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fbc0 	bl	8000a18 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e28a      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a6:	4b60      	ldr	r3, [pc, #384]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0xe8>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c2:	4b59      	ldr	r3, [pc, #356]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012cc:	4b56      	ldr	r3, [pc, #344]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x136>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d002      	beq.n	80012e8 <HAL_RCC_OscConfig+0x13c>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d11f      	bne.n	8001328 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_OscConfig+0x154>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e25d      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b49      	ldr	r3, [pc, #292]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	4946      	ldr	r1, [pc, #280]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001314:	4b45      	ldr	r3, [pc, #276]	@ (800142c <HAL_RCC_OscConfig+0x280>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb31 	bl	8000980 <HAL_InitTick>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d043      	beq.n	80013ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e249      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d023      	beq.n	8001378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001330:	4b3d      	ldr	r3, [pc, #244]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a3c      	ldr	r2, [pc, #240]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800133a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fb6c 	bl	8000a18 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fb68 	bl	8000a18 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e232      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	061b      	lsls	r3, r3, #24
 8001370:	492d      	ldr	r1, [pc, #180]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
 8001376:	e01a      	b.n	80013ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2a      	ldr	r2, [pc, #168]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 800137e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fb48 	bl	8000a18 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fb44 	bl	8000a18 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e20e      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800139e:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x1e0>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d041      	beq.n	800143e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01c      	beq.n	80013fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c8:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb21 	bl	8000a18 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013da:	f7ff fb1d 	bl	8000a18 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1e7      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ef      	beq.n	80013da <HAL_RCC_OscConfig+0x22e>
 80013fa:	e020      	b.n	800143e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001402:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <HAL_RCC_OscConfig+0x27c>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fb04 	bl	8000a18 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001412:	e00d      	b.n	8001430 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fb00 	bl	8000a18 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d906      	bls.n	8001430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1ca      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001430:	4b8c      	ldr	r3, [pc, #560]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ea      	bne.n	8001414 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a6 	beq.w	8001598 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001450:	4b84      	ldr	r3, [pc, #528]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x2b4>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x2b6>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b7f      	ldr	r3, [pc, #508]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	4a7e      	ldr	r2, [pc, #504]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6593      	str	r3, [r2, #88]	@ 0x58
 8001472:	4b7c      	ldr	r3, [pc, #496]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800147e:	2301      	movs	r3, #1
 8001480:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001482:	4b79      	ldr	r3, [pc, #484]	@ (8001668 <HAL_RCC_OscConfig+0x4bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800148e:	4b76      	ldr	r3, [pc, #472]	@ (8001668 <HAL_RCC_OscConfig+0x4bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	@ (8001668 <HAL_RCC_OscConfig+0x4bc>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149a:	f7ff fabd 	bl	8000a18 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a2:	f7ff fab9 	bl	8000a18 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e183      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001668 <HAL_RCC_OscConfig+0x4bc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d108      	bne.n	80014da <HAL_RCC_OscConfig+0x32e>
 80014c8:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ce:	4a65      	ldr	r2, [pc, #404]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014d8:	e024      	b.n	8001524 <HAL_RCC_OscConfig+0x378>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d110      	bne.n	8001504 <HAL_RCC_OscConfig+0x358>
 80014e2:	4b60      	ldr	r3, [pc, #384]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001502:	e00f      	b.n	8001524 <HAL_RCC_OscConfig+0x378>
 8001504:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150a:	4a56      	ldr	r2, [pc, #344]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001514:	4b53      	ldr	r3, [pc, #332]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151a:	4a52      	ldr	r2, [pc, #328]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d016      	beq.n	800155a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fa74 	bl	8000a18 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fa70 	bl	8000a18 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e138      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154a:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ed      	beq.n	8001534 <HAL_RCC_OscConfig+0x388>
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fa5d 	bl	8000a18 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fa59 	bl	8000a18 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e121      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001578:	4b3a      	ldr	r3, [pc, #232]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ed      	bne.n	8001562 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	4a34      	ldr	r2, [pc, #208]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001596:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d03c      	beq.n	800161e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fa2c 	bl	8000a18 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c4:	f7ff fa28 	bl	8000a18 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0f2      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015d6:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x418>
 80015e4:	e01b      	b.n	800161e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80015e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa0f 	bl	8000a18 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fe:	f7ff fa0b 	bl	8000a18 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0d5      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ef      	bne.n	80015fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80c9 	beq.w	80017ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b0c      	cmp	r3, #12
 8001632:	f000 8083 	beq.w	800173c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d15e      	bne.n	80016fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff f9e5 	bl	8000a18 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001650:	e00c      	b.n	800166c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f9e1 	bl	8000a18 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d905      	bls.n	800166c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0ab      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	4b55      	ldr	r3, [pc, #340]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ec      	bne.n	8001652 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	4b52      	ldr	r3, [pc, #328]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b52      	ldr	r3, [pc, #328]	@ (80017c8 <HAL_RCC_OscConfig+0x61c>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6a11      	ldr	r1, [r2, #32]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001688:	3a01      	subs	r2, #1
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	4311      	orrs	r1, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800169a:	0852      	lsrs	r2, r2, #1
 800169c:	3a01      	subs	r2, #1
 800169e:	0552      	lsls	r2, r2, #21
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016a6:	0852      	lsrs	r2, r2, #1
 80016a8:	3a01      	subs	r2, #1
 80016aa:	0652      	lsls	r2, r2, #25
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016b2:	06d2      	lsls	r2, r2, #27
 80016b4:	430a      	orrs	r2, r1
 80016b6:	4943      	ldr	r1, [pc, #268]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a40      	ldr	r2, [pc, #256]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c8:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a3d      	ldr	r2, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff f9a0 	bl	8000a18 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff f99c 	bl	8000a18 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e066      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x530>
 80016fa:	e05e      	b.n	80017ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff f986 	bl	8000a18 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f982 	bl	8000a18 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04c      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001722:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	4924      	ldr	r1, [pc, #144]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_RCC_OscConfig+0x620>)
 8001736:	4013      	ands	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
 800173a:	e03e      	b.n	80017ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e039      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <HAL_RCC_OscConfig+0x618>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	429a      	cmp	r2, r3
 800175a:	d12c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	3b01      	subs	r3, #1
 8001768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d123      	bne.n	80017b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11b      	bne.n	80017b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d113      	bne.n	80017b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	3b01      	subs	r3, #1
 800179c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	019f800c 	.word	0x019f800c
 80017cc:	feeefffc 	.word	0xfeeefffc

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e11e      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b91      	ldr	r3, [pc, #580]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b8e      	ldr	r3, [pc, #568]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 020f 	bic.w	r2, r3, #15
 80017fe:	498c      	ldr	r1, [pc, #560]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b8a      	ldr	r3, [pc, #552]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e106      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d073      	beq.n	800190c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d129      	bne.n	8001880 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182c:	4b81      	ldr	r3, [pc, #516]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0f4      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800183c:	f000 f99e 	bl	8001b7c <RCC_GetSysClockFreqFromPLLSource>
 8001840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4a7c      	ldr	r2, [pc, #496]	@ (8001a38 <HAL_RCC_ClockConfig+0x268>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d93f      	bls.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800184a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800185e:	2b00      	cmp	r3, #0
 8001860:	d033      	beq.n	80018ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d12f      	bne.n	80018ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800186a:	4b72      	ldr	r3, [pc, #456]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001872:	4a70      	ldr	r2, [pc, #448]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e024      	b.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d107      	bne.n	8001898 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001888:	4b6a      	ldr	r3, [pc, #424]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0c6      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	4b66      	ldr	r3, [pc, #408]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0be      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018a8:	f000 f8ce 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4a61      	ldr	r2, [pc, #388]	@ (8001a38 <HAL_RCC_ClockConfig+0x268>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d909      	bls.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018be:	4a5d      	ldr	r2, [pc, #372]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4957      	ldr	r1, [pc, #348]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff f89c 	bl	8000a18 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff f898 	bl	8000a18 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e095      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d023      	beq.n	8001960 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b43      	ldr	r3, [pc, #268]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a42      	ldr	r2, [pc, #264]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800192a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800192e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800193c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001944:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001946:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800194a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b39      	ldr	r3, [pc, #228]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4936      	ldr	r1, [pc, #216]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
 800195e:	e008      	b.n	8001972 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b80      	cmp	r3, #128	@ 0x80
 8001964:	d105      	bne.n	8001972 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001966:	4b33      	ldr	r3, [pc, #204]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4a32      	ldr	r2, [pc, #200]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800196c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001970:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001972:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d21d      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001980:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 020f 	bic.w	r2, r3, #15
 8001988:	4929      	ldr	r1, [pc, #164]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001990:	f7ff f842 	bl	8000a18 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff f83e 	bl	8000a18 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e03b      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_RCC_ClockConfig+0x260>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1ed      	bne.n	8001998 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4917      	ldr	r1, [pc, #92]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490f      	ldr	r1, [pc, #60]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019fa:	f000 f825 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <HAL_RCC_ClockConfig+0x26c>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <HAL_RCC_ClockConfig+0x270>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_RCC_ClockConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe ffae 	bl	8000980 <HAL_InitTick>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	04c4b400 	.word	0x04c4b400
 8001a3c:	08002dcc 	.word	0x08002dcc
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d102      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e047      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e03e      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a72:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d136      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3301      	adds	r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	68d2      	ldr	r2, [r2, #12]
 8001aa8:	0a12      	lsrs	r2, r2, #8
 8001aaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
      break;
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac0:	68d2      	ldr	r2, [r2, #12]
 8001ac2:	0a12      	lsrs	r2, r2, #8
 8001ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
      break;
 8001ace:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0e5b      	lsrs	r3, r3, #25
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e001      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001af0:	693b      	ldr	r3, [r7, #16]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	016e3600 	.word	0x016e3600

08001b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4904      	ldr	r1, [pc, #16]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08002ddc 	.word	0x08002ddc

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b54:	f7ff ffda 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4904      	ldr	r1, [pc, #16]	@ (8001b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08002ddc 	.word	0x08002ddc

08001b7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d10c      	bne.n	8001bba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba0:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001baa:	68d2      	ldr	r2, [r2, #12]
 8001bac:	0a12      	lsrs	r2, r2, #8
 8001bae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
    break;
 8001bb8:	e00c      	b.n	8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bc4:	68d2      	ldr	r2, [r2, #12]
 8001bc6:	0a12      	lsrs	r2, r2, #8
 8001bc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    break;
 8001bd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0e5b      	lsrs	r3, r3, #25
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	3301      	adds	r3, #1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	016e3600 	.word	0x016e3600
 8001c04:	00f42400 	.word	0x00f42400

08001c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c10:	2300      	movs	r3, #0
 8001c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c14:	2300      	movs	r3, #0
 8001c16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8098 	beq.w	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c42:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c52:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a39      	ldr	r2, [pc, #228]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c5e:	f7fe fedb 	bl	8000a18 <HAL_GetTick>
 8001c62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c64:	e009      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7fe fed7 	bl	8000a18 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d902      	bls.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	74fb      	strb	r3, [r7, #19]
        break;
 8001c78:	e005      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7a:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0ef      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c86:	7cfb      	ldrb	r3, [r7, #19]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d159      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01e      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d019      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ca8:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb4:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cba:	4a1f      	ldr	r2, [pc, #124]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cca:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cd4:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d016      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fe97 	bl	8000a18 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cec:	e00b      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe fe93 	bl	8000a18 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	74fb      	strb	r3, [r7, #19]
            break;
 8001d04:	e006      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ec      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d28:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001d30:	e008      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	74bb      	strb	r3, [r7, #18]
 8001d36:	e005      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d44:	7c7b      	ldrb	r3, [r7, #17]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4ba7      	ldr	r3, [pc, #668]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	4aa6      	ldr	r2, [pc, #664]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d62:	4ba1      	ldr	r3, [pc, #644]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d68:	f023 0203 	bic.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	499d      	ldr	r1, [pc, #628]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d84:	4b98      	ldr	r3, [pc, #608]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	f023 020c 	bic.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4995      	ldr	r1, [pc, #596]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001da6:	4b90      	ldr	r3, [pc, #576]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	498c      	ldr	r1, [pc, #560]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dc8:	4b87      	ldr	r3, [pc, #540]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	4984      	ldr	r1, [pc, #528]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dea:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	497b      	ldr	r1, [pc, #492]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e0c:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	4973      	ldr	r1, [pc, #460]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	496a      	ldr	r1, [pc, #424]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e50:	4b65      	ldr	r3, [pc, #404]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4962      	ldr	r1, [pc, #392]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e72:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	4959      	ldr	r1, [pc, #356]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e94:	4b54      	ldr	r3, [pc, #336]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	4951      	ldr	r1, [pc, #324]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	4948      	ldr	r1, [pc, #288]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ed6:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a43      	ldr	r2, [pc, #268]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001edc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ee0:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d015      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eee:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	493a      	ldr	r1, [pc, #232]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f0e:	4b36      	ldr	r3, [pc, #216]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4a35      	ldr	r2, [pc, #212]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f18:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f26:	4b30      	ldr	r3, [pc, #192]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f34:	492c      	ldr	r1, [pc, #176]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f44:	d105      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f46:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a27      	ldr	r2, [pc, #156]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f50:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6c:	491e      	ldr	r1, [pc, #120]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f88:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f96:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	4910      	ldr	r1, [pc, #64]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fc0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d018      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	4902      	ldr	r1, [pc, #8]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	e001      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ff4:	4b21      	ldr	r3, [pc, #132]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a20      	ldr	r2, [pc, #128]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002012:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	4918      	ldr	r1, [pc, #96]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202a:	d105      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002036:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800204a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002052:	490a      	ldr	r1, [pc, #40]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800205e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800206e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002070:	7cbb      	ldrb	r3, [r7, #18]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e042      	b.n	8002118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe fb87 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2224      	movs	r2, #36	@ 0x24
 80020ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fb24 	bl	8002718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f825 	bl	8002120 <UART_SetConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01b      	b.n	8002118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fba3 	bl	800285c <UART_CheckIdleState>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002124:	b08c      	sub	sp, #48	@ 0x30
 8002126:	af00      	add	r7, sp, #0
 8002128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	431a      	orrs	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4313      	orrs	r3, r2
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4baa      	ldr	r3, [pc, #680]	@ (80023f8 <UART_SetConfig+0x2d8>)
 8002150:	4013      	ands	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002158:	430b      	orrs	r3, r1
 800215a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9f      	ldr	r2, [pc, #636]	@ (80023fc <UART_SetConfig+0x2dc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002188:	4313      	orrs	r3, r2
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002196:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f023 010f 	bic.w	r1, r3, #15
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a90      	ldr	r2, [pc, #576]	@ (8002400 <UART_SetConfig+0x2e0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d125      	bne.n	8002210 <UART_SetConfig+0xf0>
 80021c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002404 <UART_SetConfig+0x2e4>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d81a      	bhi.n	8002208 <UART_SetConfig+0xe8>
 80021d2:	a201      	add	r2, pc, #4	@ (adr r2, 80021d8 <UART_SetConfig+0xb8>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021f9 	.word	0x080021f9
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	08002201 	.word	0x08002201
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021ee:	e116      	b.n	800241e <UART_SetConfig+0x2fe>
 80021f0:	2302      	movs	r3, #2
 80021f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021f6:	e112      	b.n	800241e <UART_SetConfig+0x2fe>
 80021f8:	2304      	movs	r3, #4
 80021fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021fe:	e10e      	b.n	800241e <UART_SetConfig+0x2fe>
 8002200:	2308      	movs	r3, #8
 8002202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002206:	e10a      	b.n	800241e <UART_SetConfig+0x2fe>
 8002208:	2310      	movs	r3, #16
 800220a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800220e:	e106      	b.n	800241e <UART_SetConfig+0x2fe>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a7c      	ldr	r2, [pc, #496]	@ (8002408 <UART_SetConfig+0x2e8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d138      	bne.n	800228c <UART_SetConfig+0x16c>
 800221a:	4b7a      	ldr	r3, [pc, #488]	@ (8002404 <UART_SetConfig+0x2e4>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d82d      	bhi.n	8002284 <UART_SetConfig+0x164>
 8002228:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <UART_SetConfig+0x110>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002265 	.word	0x08002265
 8002234:	08002285 	.word	0x08002285
 8002238:	08002285 	.word	0x08002285
 800223c:	08002285 	.word	0x08002285
 8002240:	08002275 	.word	0x08002275
 8002244:	08002285 	.word	0x08002285
 8002248:	08002285 	.word	0x08002285
 800224c:	08002285 	.word	0x08002285
 8002250:	0800226d 	.word	0x0800226d
 8002254:	08002285 	.word	0x08002285
 8002258:	08002285 	.word	0x08002285
 800225c:	08002285 	.word	0x08002285
 8002260:	0800227d 	.word	0x0800227d
 8002264:	2300      	movs	r3, #0
 8002266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800226a:	e0d8      	b.n	800241e <UART_SetConfig+0x2fe>
 800226c:	2302      	movs	r3, #2
 800226e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002272:	e0d4      	b.n	800241e <UART_SetConfig+0x2fe>
 8002274:	2304      	movs	r3, #4
 8002276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800227a:	e0d0      	b.n	800241e <UART_SetConfig+0x2fe>
 800227c:	2308      	movs	r3, #8
 800227e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002282:	e0cc      	b.n	800241e <UART_SetConfig+0x2fe>
 8002284:	2310      	movs	r3, #16
 8002286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800228a:	e0c8      	b.n	800241e <UART_SetConfig+0x2fe>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a5e      	ldr	r2, [pc, #376]	@ (800240c <UART_SetConfig+0x2ec>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d125      	bne.n	80022e2 <UART_SetConfig+0x1c2>
 8002296:	4b5b      	ldr	r3, [pc, #364]	@ (8002404 <UART_SetConfig+0x2e4>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80022a0:	2b30      	cmp	r3, #48	@ 0x30
 80022a2:	d016      	beq.n	80022d2 <UART_SetConfig+0x1b2>
 80022a4:	2b30      	cmp	r3, #48	@ 0x30
 80022a6:	d818      	bhi.n	80022da <UART_SetConfig+0x1ba>
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d00a      	beq.n	80022c2 <UART_SetConfig+0x1a2>
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d814      	bhi.n	80022da <UART_SetConfig+0x1ba>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <UART_SetConfig+0x19a>
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d008      	beq.n	80022ca <UART_SetConfig+0x1aa>
 80022b8:	e00f      	b.n	80022da <UART_SetConfig+0x1ba>
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022c0:	e0ad      	b.n	800241e <UART_SetConfig+0x2fe>
 80022c2:	2302      	movs	r3, #2
 80022c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022c8:	e0a9      	b.n	800241e <UART_SetConfig+0x2fe>
 80022ca:	2304      	movs	r3, #4
 80022cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022d0:	e0a5      	b.n	800241e <UART_SetConfig+0x2fe>
 80022d2:	2308      	movs	r3, #8
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022d8:	e0a1      	b.n	800241e <UART_SetConfig+0x2fe>
 80022da:	2310      	movs	r3, #16
 80022dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022e0:	e09d      	b.n	800241e <UART_SetConfig+0x2fe>
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002410 <UART_SetConfig+0x2f0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d125      	bne.n	8002338 <UART_SetConfig+0x218>
 80022ec:	4b45      	ldr	r3, [pc, #276]	@ (8002404 <UART_SetConfig+0x2e4>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80022f8:	d016      	beq.n	8002328 <UART_SetConfig+0x208>
 80022fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80022fc:	d818      	bhi.n	8002330 <UART_SetConfig+0x210>
 80022fe:	2b80      	cmp	r3, #128	@ 0x80
 8002300:	d00a      	beq.n	8002318 <UART_SetConfig+0x1f8>
 8002302:	2b80      	cmp	r3, #128	@ 0x80
 8002304:	d814      	bhi.n	8002330 <UART_SetConfig+0x210>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <UART_SetConfig+0x1f0>
 800230a:	2b40      	cmp	r3, #64	@ 0x40
 800230c:	d008      	beq.n	8002320 <UART_SetConfig+0x200>
 800230e:	e00f      	b.n	8002330 <UART_SetConfig+0x210>
 8002310:	2300      	movs	r3, #0
 8002312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002316:	e082      	b.n	800241e <UART_SetConfig+0x2fe>
 8002318:	2302      	movs	r3, #2
 800231a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800231e:	e07e      	b.n	800241e <UART_SetConfig+0x2fe>
 8002320:	2304      	movs	r3, #4
 8002322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002326:	e07a      	b.n	800241e <UART_SetConfig+0x2fe>
 8002328:	2308      	movs	r3, #8
 800232a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800232e:	e076      	b.n	800241e <UART_SetConfig+0x2fe>
 8002330:	2310      	movs	r3, #16
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002336:	e072      	b.n	800241e <UART_SetConfig+0x2fe>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a35      	ldr	r2, [pc, #212]	@ (8002414 <UART_SetConfig+0x2f4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d12a      	bne.n	8002398 <UART_SetConfig+0x278>
 8002342:	4b30      	ldr	r3, [pc, #192]	@ (8002404 <UART_SetConfig+0x2e4>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800234c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002350:	d01a      	beq.n	8002388 <UART_SetConfig+0x268>
 8002352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002356:	d81b      	bhi.n	8002390 <UART_SetConfig+0x270>
 8002358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235c:	d00c      	beq.n	8002378 <UART_SetConfig+0x258>
 800235e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002362:	d815      	bhi.n	8002390 <UART_SetConfig+0x270>
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <UART_SetConfig+0x250>
 8002368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800236c:	d008      	beq.n	8002380 <UART_SetConfig+0x260>
 800236e:	e00f      	b.n	8002390 <UART_SetConfig+0x270>
 8002370:	2300      	movs	r3, #0
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002376:	e052      	b.n	800241e <UART_SetConfig+0x2fe>
 8002378:	2302      	movs	r3, #2
 800237a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800237e:	e04e      	b.n	800241e <UART_SetConfig+0x2fe>
 8002380:	2304      	movs	r3, #4
 8002382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002386:	e04a      	b.n	800241e <UART_SetConfig+0x2fe>
 8002388:	2308      	movs	r3, #8
 800238a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800238e:	e046      	b.n	800241e <UART_SetConfig+0x2fe>
 8002390:	2310      	movs	r3, #16
 8002392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002396:	e042      	b.n	800241e <UART_SetConfig+0x2fe>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <UART_SetConfig+0x2dc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d13a      	bne.n	8002418 <UART_SetConfig+0x2f8>
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <UART_SetConfig+0x2e4>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80023b0:	d01a      	beq.n	80023e8 <UART_SetConfig+0x2c8>
 80023b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80023b6:	d81b      	bhi.n	80023f0 <UART_SetConfig+0x2d0>
 80023b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023bc:	d00c      	beq.n	80023d8 <UART_SetConfig+0x2b8>
 80023be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023c2:	d815      	bhi.n	80023f0 <UART_SetConfig+0x2d0>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <UART_SetConfig+0x2b0>
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023cc:	d008      	beq.n	80023e0 <UART_SetConfig+0x2c0>
 80023ce:	e00f      	b.n	80023f0 <UART_SetConfig+0x2d0>
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023d6:	e022      	b.n	800241e <UART_SetConfig+0x2fe>
 80023d8:	2302      	movs	r3, #2
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023de:	e01e      	b.n	800241e <UART_SetConfig+0x2fe>
 80023e0:	2304      	movs	r3, #4
 80023e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023e6:	e01a      	b.n	800241e <UART_SetConfig+0x2fe>
 80023e8:	2308      	movs	r3, #8
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ee:	e016      	b.n	800241e <UART_SetConfig+0x2fe>
 80023f0:	2310      	movs	r3, #16
 80023f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023f6:	e012      	b.n	800241e <UART_SetConfig+0x2fe>
 80023f8:	cfff69f3 	.word	0xcfff69f3
 80023fc:	40008000 	.word	0x40008000
 8002400:	40013800 	.word	0x40013800
 8002404:	40021000 	.word	0x40021000
 8002408:	40004400 	.word	0x40004400
 800240c:	40004800 	.word	0x40004800
 8002410:	40004c00 	.word	0x40004c00
 8002414:	40005000 	.word	0x40005000
 8002418:	2310      	movs	r3, #16
 800241a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4aae      	ldr	r2, [pc, #696]	@ (80026dc <UART_SetConfig+0x5bc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	f040 8097 	bne.w	8002558 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800242a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800242e:	2b08      	cmp	r3, #8
 8002430:	d823      	bhi.n	800247a <UART_SetConfig+0x35a>
 8002432:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <UART_SetConfig+0x318>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	0800245d 	.word	0x0800245d
 800243c:	0800247b 	.word	0x0800247b
 8002440:	08002465 	.word	0x08002465
 8002444:	0800247b 	.word	0x0800247b
 8002448:	0800246b 	.word	0x0800246b
 800244c:	0800247b 	.word	0x0800247b
 8002450:	0800247b 	.word	0x0800247b
 8002454:	0800247b 	.word	0x0800247b
 8002458:	08002473 	.word	0x08002473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800245c:	f7ff fb62 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002462:	e010      	b.n	8002486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002464:	4b9e      	ldr	r3, [pc, #632]	@ (80026e0 <UART_SetConfig+0x5c0>)
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002468:	e00d      	b.n	8002486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800246a:	f7ff faed 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 800246e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002470:	e009      	b.n	8002486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002478:	e005      	b.n	8002486 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8130 	beq.w	80026ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	4a94      	ldr	r2, [pc, #592]	@ (80026e4 <UART_SetConfig+0x5c4>)
 8002494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002498:	461a      	mov	r2, r3
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d305      	bcc.n	80024be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d903      	bls.n	80024c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80024c4:	e113      	b.n	80026ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	2200      	movs	r2, #0
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	60fa      	str	r2, [r7, #12]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	4a84      	ldr	r2, [pc, #528]	@ (80026e4 <UART_SetConfig+0x5c4>)
 80024d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2200      	movs	r2, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024e8:	f7fd fe96 	bl	8000218 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	020b      	lsls	r3, r1, #8
 80024fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002502:	0202      	lsls	r2, r0, #8
 8002504:	6979      	ldr	r1, [r7, #20]
 8002506:	6849      	ldr	r1, [r1, #4]
 8002508:	0849      	lsrs	r1, r1, #1
 800250a:	2000      	movs	r0, #0
 800250c:	460c      	mov	r4, r1
 800250e:	4605      	mov	r5, r0
 8002510:	eb12 0804 	adds.w	r8, r2, r4
 8002514:	eb43 0905 	adc.w	r9, r3, r5
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	469a      	mov	sl, r3
 8002520:	4693      	mov	fp, r2
 8002522:	4652      	mov	r2, sl
 8002524:	465b      	mov	r3, fp
 8002526:	4640      	mov	r0, r8
 8002528:	4649      	mov	r1, r9
 800252a:	f7fd fe75 	bl	8000218 <__aeabi_uldivmod>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4613      	mov	r3, r2
 8002534:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800253c:	d308      	bcc.n	8002550 <UART_SetConfig+0x430>
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002544:	d204      	bcs.n	8002550 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	e0ce      	b.n	80026ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002556:	e0ca      	b.n	80026ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002560:	d166      	bne.n	8002630 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002562:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002566:	2b08      	cmp	r3, #8
 8002568:	d827      	bhi.n	80025ba <UART_SetConfig+0x49a>
 800256a:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <UART_SetConfig+0x450>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002595 	.word	0x08002595
 8002574:	0800259d 	.word	0x0800259d
 8002578:	080025a5 	.word	0x080025a5
 800257c:	080025bb 	.word	0x080025bb
 8002580:	080025ab 	.word	0x080025ab
 8002584:	080025bb 	.word	0x080025bb
 8002588:	080025bb 	.word	0x080025bb
 800258c:	080025bb 	.word	0x080025bb
 8002590:	080025b3 	.word	0x080025b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002594:	f7ff fac6 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800259a:	e014      	b.n	80025c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800259c:	f7ff fad8 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 80025a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025a2:	e010      	b.n	80025c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025a4:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <UART_SetConfig+0x5c0>)
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025a8:	e00d      	b.n	80025c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025aa:	f7ff fa4d 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80025ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025b0:	e009      	b.n	80025c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025b8:	e005      	b.n	80025c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80025c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8090 	beq.w	80026ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	4a44      	ldr	r2, [pc, #272]	@ (80026e4 <UART_SetConfig+0x5c4>)
 80025d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d8:	461a      	mov	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	441a      	add	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	d916      	bls.n	8002628 <UART_SetConfig+0x508>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d212      	bcs.n	8002628 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	b29a      	uxth	r2, r3
 8002618:	8bfb      	ldrh	r3, [r7, #30]
 800261a:	4313      	orrs	r3, r2
 800261c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	8bfa      	ldrh	r2, [r7, #30]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	e062      	b.n	80026ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800262e:	e05e      	b.n	80026ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002630:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002634:	2b08      	cmp	r3, #8
 8002636:	d828      	bhi.n	800268a <UART_SetConfig+0x56a>
 8002638:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <UART_SetConfig+0x520>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	08002665 	.word	0x08002665
 8002644:	0800266d 	.word	0x0800266d
 8002648:	08002675 	.word	0x08002675
 800264c:	0800268b 	.word	0x0800268b
 8002650:	0800267b 	.word	0x0800267b
 8002654:	0800268b 	.word	0x0800268b
 8002658:	0800268b 	.word	0x0800268b
 800265c:	0800268b 	.word	0x0800268b
 8002660:	08002683 	.word	0x08002683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002664:	f7ff fa5e 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800266a:	e014      	b.n	8002696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800266c:	f7ff fa70 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002672:	e010      	b.n	8002696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <UART_SetConfig+0x5c0>)
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002678:	e00d      	b.n	8002696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800267a:	f7ff f9e5 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002680:	e009      	b.n	8002696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002688:	e005      	b.n	8002696 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002694:	bf00      	nop
    }

    if (pclk != 0U)
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d028      	beq.n	80026ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <UART_SetConfig+0x5c4>)
 80026a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	441a      	add	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	d910      	bls.n	80026e8 <UART_SetConfig+0x5c8>
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026cc:	d20c      	bcs.n	80026e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	e009      	b.n	80026ee <UART_SetConfig+0x5ce>
 80026da:	bf00      	nop
 80026dc:	40008000 	.word	0x40008000
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	08002de4 	.word	0x08002de4
      }
      else
      {
        ret = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2200      	movs	r2, #0
 8002708:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800270a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800270e:	4618      	mov	r0, r3
 8002710:	3730      	adds	r7, #48	@ 0x30
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01a      	beq.n	800282e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002816:	d10a      	bne.n	800282e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b098      	sub	sp, #96	@ 0x60
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800286c:	f7fe f8d4 	bl	8000a18 <HAL_GetTick>
 8002870:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d12f      	bne.n	80028e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f88e 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d022      	beq.n	80028e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e6      	bne.n	800289a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e063      	b.n	80029a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d149      	bne.n	8002982 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f857 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d03c      	beq.n	8002982 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	623b      	str	r3, [r7, #32]
   return(result);
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800291c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
 8002928:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800292c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e6      	bne.n	8002908 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3308      	adds	r3, #8
 8002940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	60fb      	str	r3, [r7, #12]
   return(result);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3308      	adds	r3, #8
 8002958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800295a:	61fa      	str	r2, [r7, #28]
 800295c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	617b      	str	r3, [r7, #20]
   return(result);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e012      	b.n	80029a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3758      	adds	r7, #88	@ 0x58
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	e04f      	b.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c8:	d04b      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7fe f825 	bl	8000a18 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e04e      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d037      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b80      	cmp	r3, #128	@ 0x80
 80029f6:	d034      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b40      	cmp	r3, #64	@ 0x40
 80029fc:	d031      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d110      	bne.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2208      	movs	r2, #8
 8002a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f838 	bl	8002a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e029      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a3c:	d111      	bne.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f81e 	bl	8002a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d0a0      	beq.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b095      	sub	sp, #84	@ 0x54
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ab2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e6      	bne.n	8002a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3308      	adds	r3, #8
 8002aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	e853 3f00 	ldrex	r3, [r3]
 8002ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e3      	bne.n	8002ac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d118      	bne.n	8002b36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f023 0310 	bic.w	r3, r3, #16
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e6      	bne.n	8002b04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002b4a:	bf00      	nop
 8002b4c:	3754      	adds	r7, #84	@ 0x54
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_UARTEx_DisableFifoMode+0x16>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e027      	b.n	8002bbc <HAL_UARTEx_DisableFifoMode+0x66>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	@ 0x24
 8002b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002b9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e02d      	b.n	8002c3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2224      	movs	r2, #36	@ 0x24
 8002bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f84f 	bl	8002cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e02d      	b.n	8002cb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f811 	bl	8002cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d108      	bne.n	8002ce2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ce0:	e031      	b.n	8002d46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	0e5b      	lsrs	r3, r3, #25
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	0f5b      	lsrs	r3, r3, #29
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d0a:	7bbb      	ldrb	r3, [r7, #14]
 8002d0c:	7b3a      	ldrb	r2, [r7, #12]
 8002d0e:	4911      	ldr	r1, [pc, #68]	@ (8002d54 <UARTEx_SetNbDataToProcess+0x94>)
 8002d10:	5c8a      	ldrb	r2, [r1, r2]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d16:	7b3a      	ldrb	r2, [r7, #12]
 8002d18:	490f      	ldr	r1, [pc, #60]	@ (8002d58 <UARTEx_SetNbDataToProcess+0x98>)
 8002d1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	7b7a      	ldrb	r2, [r7, #13]
 8002d2c:	4909      	ldr	r1, [pc, #36]	@ (8002d54 <UARTEx_SetNbDataToProcess+0x94>)
 8002d2e:	5c8a      	ldrb	r2, [r1, r2]
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d34:	7b7a      	ldrb	r2, [r7, #13]
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <UARTEx_SetNbDataToProcess+0x98>)
 8002d38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	08002dfc 	.word	0x08002dfc
 8002d58:	08002e04 	.word	0x08002e04

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	@ (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 f818 	bl	8002db4 <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08002e14 	.word	0x08002e14
 8002da8:	08002e14 	.word	0x08002e14
 8002dac:	08002e14 	.word	0x08002e14
 8002db0:	08002e18 	.word	0x08002e18

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
